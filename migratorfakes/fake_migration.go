// Code generated by counterfeiter. DO NOT EDIT.
package migratorfakes

import (
	"database/sql"
	"sync"

	"github.com/jfmyers9/migrator"
)

type FakeMigration struct {
	DownStub        func(*sql.Tx) error
	downMutex       sync.RWMutex
	downArgsForCall []struct {
		arg1 *sql.Tx
	}
	downReturns struct {
		result1 error
	}
	downReturnsOnCall map[int]struct {
		result1 error
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	UpStub        func(*sql.Tx) error
	upMutex       sync.RWMutex
	upArgsForCall []struct {
		arg1 *sql.Tx
	}
	upReturns struct {
		result1 error
	}
	upReturnsOnCall map[int]struct {
		result1 error
	}
	VersionStub        func() int
	versionMutex       sync.RWMutex
	versionArgsForCall []struct {
	}
	versionReturns struct {
		result1 int
	}
	versionReturnsOnCall map[int]struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMigration) Down(arg1 *sql.Tx) error {
	fake.downMutex.Lock()
	ret, specificReturn := fake.downReturnsOnCall[len(fake.downArgsForCall)]
	fake.downArgsForCall = append(fake.downArgsForCall, struct {
		arg1 *sql.Tx
	}{arg1})
	fake.recordInvocation("Down", []interface{}{arg1})
	fake.downMutex.Unlock()
	if fake.DownStub != nil {
		return fake.DownStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.downReturns
	return fakeReturns.result1
}

func (fake *FakeMigration) DownCallCount() int {
	fake.downMutex.RLock()
	defer fake.downMutex.RUnlock()
	return len(fake.downArgsForCall)
}

func (fake *FakeMigration) DownCalls(stub func(*sql.Tx) error) {
	fake.downMutex.Lock()
	defer fake.downMutex.Unlock()
	fake.DownStub = stub
}

func (fake *FakeMigration) DownArgsForCall(i int) *sql.Tx {
	fake.downMutex.RLock()
	defer fake.downMutex.RUnlock()
	argsForCall := fake.downArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMigration) DownReturns(result1 error) {
	fake.downMutex.Lock()
	defer fake.downMutex.Unlock()
	fake.DownStub = nil
	fake.downReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigration) DownReturnsOnCall(i int, result1 error) {
	fake.downMutex.Lock()
	defer fake.downMutex.Unlock()
	fake.DownStub = nil
	if fake.downReturnsOnCall == nil {
		fake.downReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigration) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nameReturns
	return fakeReturns.result1
}

func (fake *FakeMigration) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeMigration) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeMigration) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMigration) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMigration) Up(arg1 *sql.Tx) error {
	fake.upMutex.Lock()
	ret, specificReturn := fake.upReturnsOnCall[len(fake.upArgsForCall)]
	fake.upArgsForCall = append(fake.upArgsForCall, struct {
		arg1 *sql.Tx
	}{arg1})
	fake.recordInvocation("Up", []interface{}{arg1})
	fake.upMutex.Unlock()
	if fake.UpStub != nil {
		return fake.UpStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.upReturns
	return fakeReturns.result1
}

func (fake *FakeMigration) UpCallCount() int {
	fake.upMutex.RLock()
	defer fake.upMutex.RUnlock()
	return len(fake.upArgsForCall)
}

func (fake *FakeMigration) UpCalls(stub func(*sql.Tx) error) {
	fake.upMutex.Lock()
	defer fake.upMutex.Unlock()
	fake.UpStub = stub
}

func (fake *FakeMigration) UpArgsForCall(i int) *sql.Tx {
	fake.upMutex.RLock()
	defer fake.upMutex.RUnlock()
	argsForCall := fake.upArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMigration) UpReturns(result1 error) {
	fake.upMutex.Lock()
	defer fake.upMutex.Unlock()
	fake.UpStub = nil
	fake.upReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigration) UpReturnsOnCall(i int, result1 error) {
	fake.upMutex.Lock()
	defer fake.upMutex.Unlock()
	fake.UpStub = nil
	if fake.upReturnsOnCall == nil {
		fake.upReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.upReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMigration) Version() int {
	fake.versionMutex.Lock()
	ret, specificReturn := fake.versionReturnsOnCall[len(fake.versionArgsForCall)]
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct {
	}{})
	fake.recordInvocation("Version", []interface{}{})
	fake.versionMutex.Unlock()
	if fake.VersionStub != nil {
		return fake.VersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.versionReturns
	return fakeReturns.result1
}

func (fake *FakeMigration) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *FakeMigration) VersionCalls(stub func() int) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = stub
}

func (fake *FakeMigration) VersionReturns(result1 int) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeMigration) VersionReturnsOnCall(i int, result1 int) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	if fake.versionReturnsOnCall == nil {
		fake.versionReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.versionReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeMigration) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downMutex.RLock()
	defer fake.downMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.upMutex.RLock()
	defer fake.upMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMigration) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migrator.Migration = new(FakeMigration)
